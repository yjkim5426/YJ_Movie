{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","className","src","Movie","_ref","posterPath","title","releaseDate","overview","App","state","callApi","fetch","then","response","json","results","catch","err","console","log","getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","sent","setState","stop","this","renderMovies","map","movie","src_Movie","poster_path","original_title","release_date","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAsBA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAE7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IADlB,uCACiCN,EAAQC,IAAKA,IAGjDM,MAxBf,SAAAC,GAA6D,IAA5CC,EAA4CD,EAA5CC,WAAYC,EAAgCF,EAAhCE,MAAOC,EAAyBH,EAAzBG,YAAaC,EAAYJ,EAAZI,SAC/C,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQS,EAAYR,IAAKS,KAExCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAKM,IAEPR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAKO,IAEPT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAIQ,MCoCGC,6MA/CbC,MAAQ,KAMRC,QAAU,WACR,OAAOC,MACL,4FAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,UAClBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG9BG,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWC,EAAKlB,UADhB,OACJY,EADIG,EAAAI,KAEVD,EAAKE,SAAS,CACZR,WAHQ,wBAAAG,EAAAM,SAAAV,EAAAW,WAOZC,aAAe,WAYb,OAXeL,EAAKnB,MAAMa,OAAOY,IAAI,SAAAC,GACnC,OACEtC,EAAAC,EAAAC,cAACqC,EAAD,CACEhC,WAAY+B,EAAME,YAClBhC,MAAO8B,EAAMG,eACbhC,YAAa6B,EAAMI,aACnBhC,SAAU4B,EAAM5B,SAChBiC,IAAKL,EAAMM,2FA3BjBT,KAAKZ,6CAkCE,IACCE,EAAWU,KAAKvB,MAAhBa,OACR,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWsB,EAAS,MAAQ,cAC9BA,EAASU,KAAKC,eAAiB,kBA1CtBS,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.57443a00.chunk.js","sourcesContent":["import React from \"react\";\nimport './Movie.css';\n\nfunction Movie({ posterPath, title, releaseDate, overview }) {\n  return (\n    <div className=\"movieCard\">\n      <div className=\"moviePoster\">\n        <MoviePoster poster={posterPath} alt={title} />\n      </div>\n      <div className=\"movieTitle\">\n        <h1>{title}</h1>\n      </div>\n      <div className=\"movieReleaseDate\">\n        <h3>{releaseDate}</h3>\n      </div>\n      <div className=\"movieSummary\">\n        <p>{overview}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction MoviePoster({ poster, alt }) {\n  const prePath = \"https://image.tmdb.org/t/p/original/\";\n  return <img className=\"posterImg\" src={prePath + poster} alt={alt} />;\n}\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  callApi = () => {\n    return fetch(\n      \"https://api.themoviedb.org/3/trending/movie/day?api_key=b2eeb8086c84342e951bcf03c78d3e2e\"\n    )\n      .then(response => response.json())\n      .then(json => json.results)\n      .catch(err => console.log(err));\n  };\n\n  getMovies = async () => {\n    const movies = await this.callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          posterPath={movie.poster_path}\n          title={movie.original_title}\n          releaseDate={movie.release_date}\n          overview={movie.overview}\n          key={movie.id}\n        />\n      );\n    });\n    return movies;\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"app\" : \"appLoading\"}>\n        {movies ? this.renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}